# -*- coding: utf-8 -*-
"""2020-1-60-226.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k2zBbeEs9vg47vHvWnWJ6Blk8Af7V93h
"""

import pandas as pd
df = pd.read_csv('customer reviews.csv')
df.columns

df.isnull().sum()

"""Importing my libraries"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score, precision_score, recall_score

data = pd.read_csv('customer reviews.csv')

X = data['review description'].str.lower()
y = data['reviewer rating']  # Target

tfidf = TfidfVectorizer(max_features=13000)
X_tfidf = tfidf.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.26, random_state=42)

clf = RandomForestClassifier()
clf.fit(X_train, y_train)

predictions = clf.predict(X_test)

accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)

precision_rf = precision_score(y_test, predictions, average = 'weighted')
recall_rf = recall_score(y_test, predictions, average = 'weighted')

print("Random Forest Precision:", precision_rf)
print("Random Forest Recall:", recall_rf)

from sklearn.svm import SVC

svm = SVC()
svm.fit(X_train, y_train)

svm_predictions = svm.predict(X_test)

svm_accuracy = accuracy_score(y_test, svm_predictions)
print("SVM Classifier Accuracy:", svm_accuracy)

precision_svm = precision_score(y_test, svm_predictions, average='weighted')
recall_svm = recall_score(y_test, svm_predictions, average='weighted')

print("SVM F1-Score (weighted):", f1_svm)
print("SVM Precision (weighted):", precision_svm)
print("SVM Recall (weighted):", recall_svm)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

knn_predictions = knn.predict(X_test)

knn_accuracy = accuracy_score(y_test, knn_predictions)
print("K-Nearest Neighbors Classifier Accuracy:", knn_accuracy)

knn_precision = precision_score(y_test, knn_predictions, average='weighted')
knn_recall = recall_score(y_test, knn_predictions, average='weighted')

print("K-Nearest Neighbors Classifier Precision:", knn_precision)
print("K-Nearest Neighbors Classifier Recall:", knn_recall)

print(X_tfidf.toarray())